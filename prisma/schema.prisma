// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
// Prisma schema with UUID prefixes for ids

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// USERS table
model users {
  id         String    @id @default(uuid())
  name       String?
  lastName   String?   @map("last_name")
  email      String    @unique
  password   String?
  imgURL     String?   @map("img_url")
  status     String? // online, offline
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")
  lastActive DateTime? @map("last_active")
  isAdmin    Boolean   @default(false) @map("is_admin")
  googleId   String?   @unique @map("google_id")

  // Relationships
  groupsOwned     groups[]          @relation("UserGroupsOwned")
  channelsOwned   channels[]        @relation("UserChannelsOwned")
  userPermissions userPermissions[]
  userChats       usersRooms[]      @relation("userRelation")
  messages        messages[]

  // Index
  @@index([email])
}

// CHATS table (ID with chat- prefix)
model chats {
  id        String    @id @default(dbgenerated("concat('chat-', gen_random_uuid())"))
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relationships
  messages  messages[]
  userRooms usersRooms[] @relation("chatRoomRelation")
}

// GROUPS table (ID with group- prefix)
model groups {
  id        String    @id @default(dbgenerated("concat('group-', gen_random_uuid())"))
  name      String
  imgURL    String?   @map("img_url")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  ownerId   String    @map("owner_id")

  // Relationships
  owner          users        @relation("UserGroupsOwned", fields: [ownerId], references: [id])
  channels       channels[]
  messages       messages[]
  groupRoomChats usersRooms[] @relation("groupRoomRelation")

  @@index([ownerId])
}

// CHANNELS table (ID with channel- prefix)
model channels {
  id        String    @id @default(dbgenerated("concat('channel-', gen_random_uuid())"))
  name      String
  imgURL    String?   @map("img_url")
  ownerId   String    @map("owner_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  isPublic  Boolean   @default(true) @map("is_public")

  // Relationships
  owner            users        @relation("UserChannelsOwned", fields: [ownerId], references: [id])
  Group            groups?      @relation(fields: [groupId], references: [id])
  groupId          String?
  messages         messages[]
  channelRoomChats usersRooms[] @relation("channelRoomRelation")

  @@index([ownerId])
}

// USERCHATS table
model usersRooms {
  id              String    @id @default(uuid())
  userId          String    @map("user_id")
  chatRoomId      String?   @map("chat_room_id")
  groupRoomId     String?   @map("group_room_id")
  channelRoomId   String?   @map("channel_room_id")
  createdAt       DateTime  @default(now()) @map("created_at")
  lastMessageTime DateTime  @default(now()) @map("last_message_at")
  deletedAt       DateTime? @map("deleted_at")

  // Relationships
  user users @relation("userRelation", fields: [userId], references: [id])

  chatRoom    chats?    @relation("chatRoomRelation", fields: [chatRoomId], references: [id], map: "messages_chat_room_id_fkey")
  groupRoom   groups?   @relation("groupRoomRelation", fields: [groupRoomId], references: [id], map: "messages_group_room_id_fkey")
  channelRoom channels? @relation("channelRoomRelation", fields: [channelRoomId], references: [id], map: "messages_channel_room_id_fkey")

  @@map("users_Rooms")
}

// MESSAGES table
model messages {
  id            String    @id @default(uuid())
  text          String? // Text
  userId        String    @map("user_id")
  chatRoomId    String?   @map("chat_room_id")
  groupRoomId   String?   @map("group_room_id")
  channelRoomId String?   @map("channel_room_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")
  isEdited      Boolean   @default(false) @map("is_edited")

  originalMsg       messages?  @relation("MessageRelation", fields: [originalMessageId], references: [id], map: "original_message_id")
  originalMessageId String?    @map("original_message_id")
  replies           messages[] @relation("MessageRelation")

  // Relationships
  user        users         @relation(fields: [userId], references: [id])
  chat        chats?        @relation(fields: [chatRoomId], references: [id], map: "messages_chat_room_id_fkey")
  group       groups?       @relation(fields: [groupRoomId], references: [id], map: "messages_group_room_id_fkey")
  channel     channels?     @relation(fields: [channelRoomId], references: [id], map: "messages_channel_room_id_fkey")
  attachments attachments[]

  @@index([userId])
  @@index([chatRoomId])
  @@index([groupRoomId])
  @@index([channelRoomId])
}

// ATTACHMENT table
model attachments {
  id            String    @id @default(uuid())
  messageId     String    @map("message_id")
  fileUrl       String    @map("file_url")
  createdAt     DateTime  @default(now()) @map("created_at")
  deletedAt     DateTime? @map("deleted_at")
  key           String
  name          String
  isNamePersist Boolean
  fileSize      BigInt?   @map("file_size")

  // Relationships
  message messages @relation(fields: [messageId], references: [id])

  @@index([messageId])
}

// PERMISSION table
model permissions {
  id             String            @id @default(uuid())
  action         String // e.g., remove_user, grant_admin_permission
  createdAt      DateTime          @default(now()) @map("created_at")
  deletedAt      DateTime?         @map("deleted_at")
  userPermission userPermissions[]
}

// USERPERMISSION table
model userPermissions {
  userId       String    @map("user_id")
  roomId       String    @map("room_id")
  permissionId String    @map("permission_id")
  grantedIt    DateTime  @default(now()) @map("granted_at")
  grantedBy    String    @map("granted_by")
  deletedAt    DateTime? @map("deleted_at")

  // Relationships
  user       users       @relation(fields: [userId], references: [id])
  permission permissions @relation(fields: [permissionId], references: [id])

  @@id([userId, roomId, permissionId])
  @@map("user_permissions")
}
